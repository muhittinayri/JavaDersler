package com.oop.collectionFramework.main;

/*
 * Framework : yazýlým geliþtiricilerinin kullandýðý önceden hazýrlanmýþ kütüphanelerin bulunduðu ve bunlara yenilerini ekleyebileceði yapýlarýn adýdýr.
 * Geliþmiþ frameworklerde form kontrolü, veri tabaný baðlantýsý, kullanýcý giriþ çýkýþ, mail atma, tema moturu gibi kütüphaneler mevcuttur.
 * Ayrýca bu kütüphaneler kendi içinde bir çok Somut sýnýf(Concrete Class), Soyut Sýnýf(Abstract Class), Interface ve metod barýndýrýr
 */

/*
 * Collection Framework : Benzer verileri grup halinde tutmak ve onlar üzerinde iþlemler yapmak yazýlým geliþtirirken bizim sýkça karþýlaþtýðýmýz problemlerdir
 * Örnek : Çok sayýda tamsayýyý sýralamak Collection Framework bu gibi problemleri ve iþlemleri kolaycaa yapmamýzý saðlayan içinde bir çok somut sýnýf, soyut
 * sýnýf, interface ve metod bulunduran Java geliþtiricileri tarafýndan tasarlanmýþ bir frameworktür.
 *
 * 
 * Collection Objesi : Collection objesi içinde baþka objeler barýndýran bir objedir ve Collection Frameworkte bulunan Collection bir interface olup içinde benzer
 * türden objeleri liste halinde sýrali halde ve benzersiz olacak þekilde barýndýracak objelerin temel metodlarýný belirler.
 * 
 * 
 * Collection Framework Özellikleri : Collection Framework içinde bir çok interface ve class bulundurur.
 * Verilerin liste halinde tutulmasý için List interface'i,
 * Kuyruk halinde tutulmasý için Queue interface'i
 * Benzersiz tutulmasý için Set interface'i bulunur. 
 * Bu 3 interface'de Collection interfaceden türerler.
 * 
 * Ancak Map interface'i Collection Interface ile baðlantýlý olmamasýna raðmen Collection Framework'ün içinde bulunan kullanýþlý bir interfacedir.
 * 
 * Bu interface'i uygulayan veya implemente eden somut sýnýflar ile bu framework tamamlanýr (Örnek : ArrayList,LinkedList vs)
 */



public class Driver {
	public static void main(String[] args) {
		
	}
}
